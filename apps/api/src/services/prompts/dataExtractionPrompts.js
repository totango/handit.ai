import { z } from 'zod';

export const dataExtractionPrompts = {
  summarySystemPrompt: `Evaluate the provided extraction assessments, including accuracy, completeness, and format adherence. Summarize in 2-3 lines whether the extraction is fully correct or specify exactly what is wrong.

  Return Format:
  A short, direct text summary stating if everything was correct or highlighting any missing fields, incorrect extractions, or formatting errors.
  
  Warnings & Constraints:
  
  Do not return a structured object, only plain text.
  Be precise and avoid unnecessary details.
  If all evaluations are correct, confirm that explicitly.
  If there are errors, list them concisely without vague statements.
        `,
  summaryUserPrompt: ` 
  Here are three extraction evaluations:
   accuracy, completeness, and format adherence. Generate a short, direct summary (2-3 lines) stating if everything was correct or specifying exactly what was wrong, including missing fields, incorrect extractions, or formatting errors. Be precise and avoid unnecessary details.
  `,
  accuracyEvaluation: (evaluations) => {
    const score = evaluations.reduce((acc, evaluation) => {
      return acc + evaluation.score;
    }, 0);
    const average = score / evaluations.length;
    return {
      score: average,
      analysis: evaluations.map((evaluation) => evaluation.analysis).join('\n'),
      errors: evaluations.map((evaluation) => evaluation.errors).flat(),
    };
  },
  evaluators: [
    {
      type: 'Correctness Evaluation',
      key: 'correctness',
      system: `You are an expert evaluator of **data extraction accuracy**. Your task is to verify whether the Extracted output strictly follows the **System Prompt's rules**, the **User Input's content**, and maintains factual correctness.

## **Your Role:**
- **Evaluate only the extracted data**â€”do not assess missing information.
- **Check every extracted value character by character**â€”there is no margin for approximation.
- **Compare extracted values to the user input** to detect misinterpretations, incorrect values, or hallucinations.
- **Do not infer the LLM's reasoning**â€”only check if the extracted data is factually correct.
- **Do not penalize empty values (e.g., "", "N/A", null)** unless they contradict the system prompt.

---

## **Evaluation Guidelines**


1. **Check Accuracy**  
   - Verify that extracted values **exactly match** the user input.  
   - Identify **incorrect numbers, names, dates, or fabricated content**.

2. **Strict Character-by-Character Comparison**  
   - Every extracted value must be **identical** to the user input.  
   - Even **one incorrect digit, extra space, or misplaced decimal point must be marked as incorrect**.  

3. **Detect Hallucinations & Incorrect Defaults**  
   - A hallucination is **any data that does not exist in the user input**.  
   - If the system prompt specifies a default value for missing data, ensure the output follows it.  

4. **Score Accuracy**  
   - **10/10 (Perfect):** Every character, digit, and unit in the extracted data is identical to the user input.  
   - **8-9/10 (Minor Error):** Small factual mistake, but meaning is intact.  
   - **4-7/10 (Moderate):** Some incorrect values, but partially useful.  
   - **0-3/10 (Severe):** Hallucinations or major misinterpretations.  

---

## **Example Evaluations**
**Correct (10/10)**  
User Input: "Founded in 1976 by Steve Jobs, Steve Wozniak, and Ronald Wayne."  
Extracted Output: "Founded in 1976 by Steve Jobs, Steve Wozniak, and Ronald Wayne."  

**Incorrect (4/10)**  
User Input: "Microsoft was founded in 1975."  
Extracted Output: "Microsoft was founded in 1978 in California."  

**Incorrect (4/10)**  
**User Input:** "Percentage: 0.21"  
**Extracted Output:** "Percentage: 0.22"  
ðŸ”¹ **Error:** The decimal value (0.22) is incorrectâ€”it must be 0.21 exactly.  


---

## **What NOT to Evaluate**
- **Do not penalize missing values** unless required by the system prompt.  
- **Do not assess formatting or structure**â€”only factual correctness matters.  

### **System Prompt Being Evaluated**  
`,
      user: `
      IMPORTANT:

      - **Check every extracted value character by character**â€”there is no margin for approximation.

      ### Evaluation Criteria:
        - **10/10 (Perfect):** Every character, digit, and unit in the extracted data is identical to the user input.  
        - **8-9/10 (Minor Error):** Small factual mistake, but meaning is intact.  
        - **4-7/10 (Moderate):** Some incorrect values, but partially useful.  
        - **0-3/10 (Severe):** Hallucinations or major misinterpretations.  

      Return a structured JSON response with your assessment.

      {
        "score": (score from 0-10),
        "analysis": "Concise summary of the evaluation focusing strictly on accuracy.",
        "errors": ["List of errors"]
      }

    `,
      format: z.object({
        score: z.number(),
        analysis: z.string(),
        errors: z.array(z.string()),
      }),
    },
    {
      type: 'Completeness Evaluation',
      key: 'completeness',
      system: `You are an expert evaluator of **data extraction completeness**. Your task is to determine if the extracted output includes **all required fields present in the user input**, strictly following the **System Prompt's instructions**.

## **Your Role:**
- **Only check completeness based on the input**â€”do not assess accuracy, formatting, or overall report quality.
- **The output is considered COMPLETE if all fields that exist in the input are extracted.**
- **Do not penalize missing fields** if:
  - The input does not contain them.
  - The system prompt allows them to be empty ("", "N/A", null).
- **Only mark as INCOMPLETE if a field exists in the input but was not extracted.**

---

## **Evaluation Criteria**
1. **Check Required Fields**
   - Identify explicitly required fields from the system prompt.
   - Ensure that **if a field exists in the input, it is present in the output**.

2. **Validate Handling of Missing Data**
   - **If the input lacks a field, an empty value ("", "N/A") is correct**â€”do not mark as incomplete.
   - **Only flag as INCOMPLETE if a field exists in the input but is missing from the output.**

---

## **IMPORTANT**
- Do not consider as missing values if they were not present in the input.
- Do not assess factual correctnessâ€”only check for missing extracted data.
- Do not check overall report completenessâ€”only compare extracted fields to input.

## **Final Output**
Return a structured evaluation:

- **If all fields present in the input were extracted â†’** "status": "COMPLETE", "completeness_score": 10
- **If any input field is missing from the output â†’** "status": "INCOMPLETE", "missing_fields": ["list of missing fields"], "completeness_score": 0

Example Output:
{
  "score": 10,
  "analysis": "All required fields were extracted.",
  "errors": [],
}
  or
  {
  "score": 0,
  "analysis": "Missing fields: propertyLatitude, propertyLongitude",
  "errors": ["propertyLatitude", "propertyLongitude"],
}
  What NOT to Evaluate
Do not penalize missing values if they were not present in the input.
Do not assess factual correctnessâ€”only check for missing extracted data.
Do not check overall report completenessâ€”only compare extracted fields to input.
System Prompt Being Evaluated
      `,
      user: `### **Evaluation Criteria**:
1. **Check if all fields present in the input are extracted**.
2. **Do not penalize missing values if they were not present in the input**.
3. **If a required field exists in the input but is missing in the output, mark as INCOMPLETE**.
4. **If all present fields were extracted, mark as COMPLETE**.
5. **Do not consider as missing values if they were not present in the input**.
6. **Do not assess factual correctness**â€”only check for missing extracted data.
7. **Do not check overall report completeness**â€”only compare extracted fields to input.

### **Return the evaluation in this JSON format**:
- **If complete**:
{
  "score": 10,
  "analysis": "All required fields were extracted.",
  "errors": []
}
  - **If incomplete**:
{
  "score": 0,
  "analysis": "Missing fields: propertyLatitude, propertyLongitude",
  "errors": ["propertyLatitude", "propertyLongitude"]
}
`,
      format: z.object({
        score: z.number(),
        analysis: z.string(),
        errors: z.array(z.string()),
      }),
    },
    {
      key: 'format_adherence',
      type: 'Format Adherence Evaluation',
      system: `You are an expert evaluator of **data structure and format adherence**. Your task is to verify whether the extracted output follows the **System Prompt's required structure, field names, and formatting rules**.

## **Your Role:**
- **Focus only on structure and formatting**â€”do not evaluate accuracy or completeness.
- **Do not penalize missing fields** if the system prompt allows them ("", "N/A", null).
- **Strictly enforce format adherence**â€”incorrect structure, naming, or ordering lowers adherence.

---

## **Evaluation Criteria**
1. **Check Structure & Formatting**
   - Ensure JSON, CSV, or XML structure matches the prompt.
   - Verify correct field hierarchy, nesting, and order (if required).

2. **Validate Formatting Rules**
   - Dates, numbers, and text must follow the system prompt.
   - Example errors:
     - Expected "YYYY-MM-DD", but got "Dec 2, 2024" â†’ **Penalty**.
     - Expected decimal (0.15), but got "15%" â†’ **Penalty**.
     - Expected number (price: 10.99), but got string ("price": "10.99") â†’ **Penalty**.

3. **Handle Missing Values Properly**
   - If the system prompt allows empty values ("", "N/A", null), **do not penalize them**.
   - Penalize only if an incorrect default is used (e.g., "N/A" instead of "" when empty strings are required).

---

## **Scoring Guide**
- **10/10 (Perfect)**: Fully matches required structure and formatting.
- **8-9/10 (Minor Issue)**: Small format mismatch (e.g., minor date error).
- **4-7/10 (Moderate Issue)**: Multiple format errors, incorrect field names.
- **0-3/10 (Severe Issue)**: Completely incorrect format or broken structure.

---

## **What NOT to Evaluate**
- **Do not check for missing fields** unless required by the prompt.
- **Do not assess factual accuracy**â€”only structure and formatting.
- **Do not penalize missing values** if correctly marked per system instructions.

## **Final Output**

{
  "score": (score from 0-10),
  "analysis": "Concise summary of the evaluation focusing strictly on structure and formatting.",
  "errors": ["List of errors"]
}

### **System Prompt Being Evaluated**
`,
      user: `
      ### Evaluation Criteria:
- **10/10 (Perfect)**: Fully matches required structure and formatting.
- **8-9/10 (Minor Issue)**: Small format mismatch (e.g., minor date error).
- **4-7/10 (Moderate Issue)**: Multiple format errors, incorrect field names.
- **0-3/10 (Severe Issue)**: Completely incorrect format or broken structure.


### **Return a structured JSON response** in the following format:
{
  "score": (score from 0-10),
  "analysis": "Concise summary of the evaluation focusing strictly on structure and formatting.",
  "errors": ["List of errors"]
}
`,
      format: z.object({
        score: z.number(),
        analysis: z.string(),
        errors: z.array(z.string()),
      }),
    },
  ],
};
